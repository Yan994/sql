MySQL （希望今天把书《MySQL数据库入门》看完）

开启sql：/usr/local/mysql/bin/mysql -u root -p

\?显示帮助信息P25
1. 修改数据库编码：alter database Yan default character set 编码方式collate编码方式_bin;
2. 删除数据库：drop database 数据库名称；
2.2 数据类型：整数类型、浮点数类型、定点数类型、日期和时间类型、字符串类型和二进制类型。
2.2.1整数类型：TINYINT(1) SMALLINT(2) MEDIUMINT(3) INT(4) BIGINT(8)
2.2.2 浮点数类型和定点数类型：FLOAT(4) DOUBLE(8) DECIMAL(M,D)(M+2)
2.2.3 时间和日期类型：YEAR(1) DATE(4) TIME(3) DATETIME(8) TIMESTAMP(4) (如果插入数据不合法，系统会自动将对应的零值插入数据库中)
YEAR类型：字符串：‘1901’～‘2155’；‘00’～‘99’；两位数字：1～99
DATE类型：字符串：‘YYYY-MM-DD’、‘YYYYMMDD’、‘YY-MM-DD’、‘YYMMDD’；数字格式：YY-MM-DD、YYMMDD；当前系统日期：CURRENT_DATE、NOW（）
TIME类型：字符串：‘D HH:MM:SS’、’HHMMSS’；当前系统时间：CURRENT_TIME、NOW()
DATETIME类型：字符串：‘YYYY-MM-DD HH:MM:SS’、’YYYYMMDDHHMMSS’、’YY-MM-DD HH:MM:SS’、’YYMMDDHHMMSS’；数字格式：YYYYMMDDHHMMSS、YYMMDDHHMMSS
输入当前系统日期和时间：NOW
TIMESTAMP类型：显示形式与DATETIME相同，但取值范围比DATATIME小；当前系统日期和时间的输入：CURRENT_TIMESTAMP、NULL、无任何输入
2.2.4 字符串和二进制类型
CHAR和VARCHAR、BINARY和VARBINARY、TEXT（TINYTEXT、MEDIUMTEXT、TEXT、LONGTEXT）、BOLD（TINYBOLD、MEDIUMBOLD、BOLD、LONGBOLD）、ENUM、SET、BIT
2.3 数据表的基本操作
2.3.1 创建数据表
Use 数据库名；
create table 表名(…)；
2.3.2 查看数据表
Show create table 数据表名;\show tables；\show create table 数据表名\g;
Describe 表名；、desc 表名；
2.3.3 修改数据表
1. 修改表名：alter table 旧表名rename [to] 新表名；
2. 修改字段名： alter table 表名 change 旧字段名 新字段名 新数据类型； 
3. 修改字段的数据类型：alter table 表名 modify 字段名 新数据类型；
4. 添加字段：alter table 表名 add 新字段名 新数据类型 [约束条件][first|after 已存在字段名]
5. 删除字段：alter table 表名 drop 字段名
6. 修改字段的排位顺序：alter table 表名 modify 字段名 数据类型 after|first 字段名2
alter table 表名 modify字段名 数据类型 first
2.3.4 删除数据表
drop table 表名

2.4 表的约束
PREMARY KEY \ FOREIGN KEY \ NOT NULL \ UNIQUE \ DEFAULT 
2.4.1 主键约束
单字段主键：字段名 数据类型 primary key
多字段主键：primary key（字段名1，字段名2，…,字段名n）
2.4.2 非空约束
字段名 数据类型 not null
2.4.3 唯一约束
字段名 数据类型 unique
2.4.4 默认约束
字段名 数据类型 default 默认值

2.5 设置表的字段值自动增加
字段名 数据类型 auto_increment

2.6 索引
查找特定数据：当执行“select * from student where id = 1000”语句时，从1 执行到1000效率太低
2.6.1 索引的概念
1. 普通索引： KEY|INDEX  index(id)
explain select * from 表名 where id = 1\g 查看id索引是否被使用
2. 唯一性索引：unique  
unique index unique_id(id ASC|DESC) 
3. 全文索引：fulltext
fulltext index fulltext_name(name)
存储引擎必须是MyISAM：Engine = myisam
4. 创建单列索引
index single_name(name(20))
5.创建多列索引
Index multi(id,name(20))
6. 创建空间索引
spatial index sp(space)
存储引擎必须是MyISAM：Engine = myisam
2. 使用CREATE INDEX 语句在已经存在的表上创建索引
create [unique|fulltext|spatial] index 索引名
On 表名（字段名[(长度)] [ASC|DESC]）
3. 使用ALTER TABLE语句在已经存在的表上创建索引
alter table 表名 add [unique|fulltext|spatial] index 索引名 (字段名[(长度)] [ASC|DESC])

2.6.3 删除索引
1.使用ALTER TABLE 删除索引
alter table 表名 drop index 索引名

2. 使用DROP INDEX 删除索引
drop index 索引名 on 表名


第三章  添加、更新和删除数据
添加：INSERT语句；更新：UPDATE语句；删除：DELETE语句

3.1 添加数据 
3.1.1 为表中所有字段添加数据
1.INSERT语句中指定所有字段名
insert into 表名(字段名1，字段名2，… )
values(值1，值2，… );
为查看是否添加成功，可以使用SELECT语句查看表中数据。
2. INSERT语句中不指定字段名
insert into 表名 values（值1，值2，… ）
3.1.2 为表的指定字段添加数据
insert into 表名（字段1，字段2，… ）values（值1，值2，… ）
insert into 表名 set 字段1 = 值1，字段2  = 值2，… 
3.1.3 同时添加多条记录
insert into 表名 [(字段1，字段2，… )]
Values (值1，值2，… )，
… 
(值1，值2，… );

3.2 更新数据
update 表名 set 字段1 = 值1，[字段2 = 值2，… ] [where 条件表达式]
1. UPDATE更新部分数据
2. UPDATE更新全部数据
查询：select * from 表名[where 条件表达式]
3.3 删除数据
delete from 表名 [where 条件表达式]
1.DELETE删除部分数据
2. DELETE删除全部数据
3.使用关键字TRUNCATE删除表中数据
truncate [table] 表名；
区别：
（1）delete语句是DML语句，truncate语句是DDL语句
（2）delete语句后面可跟where语句，truncate不可
（3）truncate删除数据后，再次添加记录时从1开始，delete后再次添加从原纪录往后添加
（4）delete语句删除后会在日志中记录，truncate不会，因此truncate效率较高


第四章：单表查询
4.1 简单查询
4.1.1 select语句
4.1.2 查询所有字段
4.1.3 查询指定字段
4.2 按条件查询
4.2.1 带关系运算符的查询
4.2.2 带IN关键字的查询
4.2.3 带BETWEEN AND关键字的查询
4.2.4 空置查询
4.2.5 带DISTINCT关键字的查询
4.2.6 带LIKE关键字的查询
4.2.7 带 AND关键字的多条件查询
4.2.8 带OR关键字的多条件查询
4.3 高级查询
4.3.1 聚合函数
4.3.2 对查询结果排序
4.3.3 分组查询
4.3.4 使用LIMIT限制查询结果的数量
4.3.5 函数（列表）
4.4 为表和字段区别名
4.4.1为表取别名
4.4.2 为字段取别名



4.1 简单查询
4.1.1 select语句
select [distinct] * |{字段名1，字段名2，… }
From 表名
[where 条件表达式1]
[group by 字段名 [having 条件表达式2]]
[order by 字段名 [ASC|DESC]]
[limit [offset] 记录数 ]
4.1.2 查询所有字段
1. 在SELECT语句中指定所有字段
Select 字段名1，字段名2，… from 表名
2. 在SELECT语句中使用星号（*）通配符替代所有字段（效率低，一般不用）
select * from 表名；
4.1.3 查询指定字段
Select 字段名1，字段名2，… from 表名；

4.2 按条件查询
4.2.1 带关系运算符的查询
Select 字段名1，字段名2，… from 表名 where 条件表达式
4.2.2 带IN关键字的查询
Select *|字段名1，字段名2，… from 表名 where 字段名 in [not] （元素1，元素2，… ）
4.2.3 带BETWEEN AND关键字的查询
Select *|字段名1，字段名2，… from 表名 where 字段名 [not] between 值1 and 值2
4.2.4 空置查询
Select *|字段名1，字段名2，… from 表名 where 字段名 is [not] null
4.2.5 带DISTINCT关键字的查询
Select distinct *|字段名1，字段名2，… from 表名；
多个字段：只有目标字段的取值都相同时才会合并
4.2.6 带LIKE关键字的查询
Select *|字段名1，字段名2，… from 表名 where 字段名 [not] like ‘匹配字符串’；
1.百分号（%）通配符：‘c%’、‘c%d’、‘%y%’
2.下划线（_）通配符：
3.匹配下划线和百分号时：‘\%’、“\_”
4.2.7 带 AND关键字的多条件查询
Select *|字段名1，字段名2，… from 表名 where 条件表达式1 and 条件表达式2 and … ;
4.2.8 带OR关键字的多条件查询
Select *|字段名1，字段名2，… from 表名 where 条件表达式1 or 条件表达式2 or … ;
OR与AND一起使用：AND优先级高于OR，先运算AND在运算OR

4.3 高级查询
4.3.1 聚合函数
1. count() : select count(*) from 表名；
2. sum() : select sum(字段名) from 表名；
3.avg() : select avg(字段名) from 表名；
4. max() : select max(字段名) from 表名；
5. min() : select min(字段名) from 表名；
4.3.2 对查询结果排序
Select *|字段名1，字段名2，… from 表名 order by 字段名1 [ASC|DESC]，字段名2 [ASC|DESC]，…
4.3.3 分组查询
Select 字段名1，字段名2，… from 表名 group by 字段名1，字段名2，… [having 条件表达式];
1. 单独使用group by分组（意义不大）
2. Group by和聚合函数一起使用
3. group by 和having关键字一起使用
4.3.4 使用LIMIT限制查询结果的数量
Select 字段名1，字段名2，… from 表名 limit [offset,] 记录数
4.3.5 函数（列表）
P117，表格记住

4.4 为表和字段区别名
4.4.1为表取别名
select * from 表名 [as] 别名；
4.4.2 为字段取别名
Select 字段名 [as] 别名 [，字段名 [as] 别名，… ] from 表名；


第五章 多表操作
5.1 外键
5.1.1 什么是外键
5.1.2 为表添加外键约束
5.1.3 删除外键约束
5.2 操作关联表
5.2.1 关联关系
5.2.2 添加数据
5.2.3 删除数据
5.3 连接查询
5.3.1 交叉连接
5.3.2 内连接
5.3.3 外连接
5.3.4 复合条件连接查询
5.4 子查询
5.4.1 带 IN关键字的子查询
5.4.2 带EXISTS关键字的子查询
5.4.3 带 ANY关键字的子查询
5.4.4 带ALL关键字的子查询
5.4.5 带比较运算符的子查询


5.1 外键
5.1.1 什么是外键
外键是指饮用另一个表中的一列或多列
5.1.2 为表添加外键约束
alter table 表名 add constraint FK_ID foreign key (外键字段名) references 外键表名（主键字段名）
（1）建立外键的表必须是InnoDB型，不能是临时表。在MySQL中只有InnoDB型的表才支持外键
（2）定义外键名时，不能加引号
添加ON DELETE 或 ON UPDATE子句避免垃圾数据的产生
alter table 表名 add constraint fk_id foreign key （外键字段名） references 外键表名(外键字段名) ；
[on delete {cascade | set null | no action | restrict}]
[on update {cascade | set null | no action |restrict}]
5.1.3 删除外键约束
 alter table 表名 drop foreign key 外键名

5.2 操作关联表
5.2.1 关联关系
1. 多对一：将外键建在多的一方
2. 多对多：定义一张中间表或连接表
3. 一对一：确定主从关系，从表中建立外键
5.2.2 添加数据
Insert into 表名(字段1，字段2，… ) values （值1，值2，… ）
5.2.3 删除数据
先删从表中的关联数据，之后删主表对应数据
或在从表中外间没有非空约束时，将从表对应数据值设为null

5.3 连接查询
5.3.1 交叉连接
Select * from 表1 cross join 表2
得到所有可能的组合
5.3.2 内连接
select 查询字段 from 表1 [inner] join 表2 on 表1.关系字段 = 表2.关系字段
使用where语句实现同样的功能
Select 表1.查询字段，表2.查询字段 From 表1 ，表2，… where 表1.关系字段 = 表2.关系字段
自连接查询：
select p1.* from employee p1 join employee p2 on p1.did = p2.did where p2.name = 'wanghong';
5.3.3 外连接
select 所查字段 from表1 left | right [outer] join表2 on 表1.关系字段 = 表2.关系字段
5.3.4 复合条件连接查询
复合条件连接查询就是在连接查询过程中，通过添加过滤条件来限制查询结果，使查询结果更加精确
select employee.name,employee.age,department.dname from department join employee on department.did = employee.did order by age

5.4 子查询
5.4.1 带 IN关键字的子查询
Select * from department where did not in (select did from employee where age = 20)
5.4.2 带EXISTS关键字的子查询
select * from department where exists (select did from employee where age>21)
5.4.3 带 ANY关键字的子查询
 select * from department where did > any(select did from employee)
5.4.4 带ALL关键字的子查询
select * from department where did > all(select did from employee)
5.4.5 带比较运算符的子查询
select * from department where did = (select did from employee where name = 'zhaosi')


第6章：事物与存储过程
6.1 事务管理
6.1.1 事物的概念
6.1.2 事物的提交
6.1.3 事物的回滚
6.1.4 事物的隔离级别
6.2 存储过程的创建
6.2.1 创建存储过程
6.2.2 变量的使用
6.2.3 定义条件和处理程序
6.2.4 光标的使用
6.2.5 流程控制的使用
6.3 存储过程的使用
6.3.1 调用存储过程
6.3.2 查看存储过程
6.3.3 修改存储过程
6.3.4 删除存储过程
6.4 综合案例——存储过程的应用


6.1 事务管理
6.1.1 事物的概念
所谓事物就是针对数据库的一组操作，事物中的语句要么都执行，要么都不执行。
 start transition；
update 表名 set 操作；
commit；
rollback；
事物同时满足4个特性/ACID标准：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）
6.1.2 事物的提交
start transaction;
update account set money = money -100 where name = ‘a’;
update account set money = money + 100 where name = 'b';
commit;
6.1.3 事物的回滚
Rollback;
之后需再次开启事物
6.1.4 事物的隔离级别
1. READ UNCOMMITTED /读未提交/ 脏读
2. READ COMMITTED/读提交/重复读和幻读
3. REPEATABLE READ/可重复读/
4. SERIALIZABLE/可串行化
1. 脏读 就是一个事物读取了另一个事物未提交的数据
2. 不可重复度 事物中两次查询结果不一致，原因是在查询过程中，其他事物做了更新的操作。
3. 幻读 在一个事物中，两次查询中数据条数不一致
4. 可串行化（serializable）  是事物的最高隔离级别，它在每个读的数据行上加上锁，使之不能相互冲突，因此会导致大量的超时现象。
set session transaction isolation level read uncommitted | read committed | repeatable read | serializable ;
查看事物的隔离级别：select @@tx_isolation

6.2 存储过程的创建
6.2.1 创建存储过程
Create procedure sp_name ([proc_parameter]) 
[characteristics… ] routine_body
proc_parameter : [in|out|inout] param_name type
设置结束符：delimiter // （必加空格符）
6.2.2 变量的使用
定义变量：
可以一次设置多个变量：declare var_name [,varname] … data_type[default value];
declare myvariable int default 100；
变量赋值（可一次赋值多个变量）：set var_name= expr[,var_name = expr] … ;
Select … into 为一个或多个变量赋值
select col_name[…] into var_name […] table_expr;
select grade, gender into s_grade,s_gender from student where name = ‘rose’;
6.2.3 定义条件和处理程序
6.2.4 光标的使用
6.2.5 流程控制的使用

6.3 存储过程的使用
6.3.1 调用存储过程
6.3.2 查看存储过程
6.3.3 修改存储过程
6.3.4 删除存储过程

6.4 综合案例——存储过程的应用



















Chapter 4 ：排序中并列的情况如何处理、中文输入
Where后的判别语句中可以同时出现and 和on吗？？