http://www.yesky.com/imagesnew/software/mysql/manual_Tutorial.html

#第一个例子

CREATE TABLE 
  shop(
  article INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL,
  dealer  CHAR(20)                 DEFAULT ''     NOT NULL,
  price   DOUBLE(16,2)             DEFAULT '0.00' NOT NULL,
  PRIMARY KEY(article,dealer));
  
INSERT INTO 
  shop
VALUES
  (1,'A',3.45),(1,'B',3.99),(2,'A',10.99),(3,'B',1.45),
  (3,'C',1.69),(3,'D',1.25),(4,'D',19.95);
  
INSERT INTO
  shop (dealer)
VALUES
  ('F')
  
SELECT
  *
FROM
  shop;
  
/*教程结果如下
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|    0000 | F      |  0.00 |
|    0001 | A      |  3.45 |
|    0001 | B      |  3.99 |
|    0002 | A      | 10.99 |
|    0003 | B      |  1.45 |
|    0003 | C      |  1.69 |
|    0003 | D      |  1.25 |
|    0004 | D      | 19.95 |
+---------+--------+-------+
/*
/*实际结果如下
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|       0 | F      |  0.00 |
|       1 | A      |  3.45 |
|       1 | B      |  3.99 |
|       2 | A      | 10.99 |
|       3 | B      |  1.45 |
|       3 | C      |  1.69 |
|       3 | D      |  1.25 |
|       4 | D      | 19.95 |
+---------+--------+-------+
8 rows in set
*/


#列的最大值
#“最大的物品号是什么？”

SELECT
  MAX(article)
AS
  article
FROM
  shop;
/*结果如下
+---------+
| article |
+---------+
|       4 |
+---------+
*/


#拥有某个列的最大值的行
#“找出最贵的文章的编号、商人和价格”
#方法一：分两步，先找出最大值，再找出所在行

SELECT
  MAX(price)
AS
  price
FROM
  shop;

SELECT
  article,dealer,price
FROM
  shop
WHERE
  price=19.95;

#方法二：按价格排序得到第一行，注意此时若存在多行价格最大，也只显示第一行

SELECT
  article,dealer,price
FROM
  shop
ORDER BY
  price
DESC
LIMIT
  1;


#列的最大值：按照分组
#“每篇文章的最高的价格是什么？”

SELECT
  article,MAX(price) AS price
FROM
  shop
GROUP BY
  article;
/*结果如下
+---------+-------+
| article | price |
+---------+-------+
|       0 |  0.00 |
|       1 |  3.99 |
|       2 | 10.99 |
|       3 |  1.69 |
|       4 | 19.95 |
+---------+-------+
*/


#拥有某个字段的组间最大值的行
#“对每篇文章，找出有最贵价格的交易者。”
#不能直接select article,dealer,max(price) as price from shop group by article;会报错，group by的article不能单一对应到dealer字段。
#方法一：先得到每篇文章的最贵价格（建成一个临时表），再找出对应交易者

CREATE TEMPORARY TABLE
  tmp(
  article INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL,
  price   DOUBLE(16,2)             DEFAULT '0.00' NOT NULL);
  
LOCK TABLES 
  tmp
READ;
LOCK TABLES
  shop
READ;

INSERT INTO
  tmp
SELECT
  article,MAX(price)
FROM
  shop
GROUP BY
  article;

SELECT
  tmp.article,shop.dealer,tmp.price
FROM
  shop,tmp
WHERE
  shop.article=tmp.article 
AND 
  shop.price=tmp.price;
/*结果如下
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|       0 | F      |  0.00 |
|       1 | B      |  3.99 |
|       2 | A      | 10.99 |
|       3 | C      |  1.69 |
|       4 | D      | 19.95 |
+---------+--------+-------+
5 rows in set
*/

UNLOCK TABLES;

DROP TABLE tmp;

#方法二：单个查询，相当低效，将dealer与price字段绑定，则一一对应

SELECT
  article,
  SUBSTRING(MAX(CONCAT(LPAD(price,6,'0'),dealer)),7) AS dealer,
  0.00+LEFT(MAX(CONCAT(LPAD(price,6,'0'),dealer)),6) AS price
FROM
  shop
GROUP BY
  article;
/*结果如下
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|       0 | F      |     0 |
|       1 | B      |  3.99 |
|       2 | A      | 10.99 |
|       3 | C      |  1.69 |
|       4 | D      | 19.95 |
+---------+--------+-------+
5 rows in set
*/


#修改某一列的记录
UPDATE
  shop
SET
  price=1.32
WHERE
  article=0;

SELECT
  *
FROM
  shop
WHERE
  article=0;
/*
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|       0 | F      |  1.32 |
+---------+--------+-------+
1 row in set
*/

#保证输出结果唯一性
SELECT DISTINCT
  article
FROM
  shop;
/*
+---------+
| article |
+---------+
|       0 |
|       1 |
|       2 |
|       3 |
|       4 |
+---------+
5 rows in set
*/

#or条件
SELECT
  *
FROM
  shop
WHERE
  dealer='A' OR dealer='B';
/*
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|       1 | A      |  3.45 |
|       1 | B      |  3.99 |
|       2 | A      | 10.99 |
|       3 | B      |  1.45 |
+---------+--------+-------+
4 rows in set
*/

#按照两个字段进行排序
SELECT
  *
FROM
  shop
ORDER BY
  price,article  DESC;
/*
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|       3 | D      |  1.25 |
|       0 | F      |  1.32 |
|       3 | B      |  1.45 |
|       3 | C      |  1.69 |
|       1 | A      |  3.45 |
|       1 | B      |  3.99 |
|       2 | A      | 10.99 |
|       4 | D      | 19.95 |
+---------+--------+-------+
8 rows in set
*/
#注：desc关键词仅适用于紧跟在它之前的列名字，其余的仍然以升序排列




#第二个例子

#使用外键

CREATE TABLE
  persons(
  id SMALLINT UNSIGNED NOT NULL auto_increment,
  name VARCHAR(60)     NOT NULL,
  PRIMARY KEY (id));

CREATE TABLE
  shirts(
  id SMALLINT UNSIGNED NOT NULL auto_increment,
  style enum('t-shirt', 'polo', 'dress') NOT NULL,
  color enum('red', 'blue', 'orange', 'white', 'black') NOT NULL,
  owner SMALLINT UNSIGNED NOT NULL REFERENCES persons,
  PRIMARY KEY (id));

INSERT INTO 
  persons
VALUES
  (NULL, 'lilliana');

INSERT INTO 
  shirts
VALUES
  (NULL, 'dress', 'orange', LAST_INSERT_ID()),
  (NULL, 'polo', 'red', LAST_INSERT_ID()),
  (NULL, 'dress', 'blue', LAST_INSERT_ID()),
  (NULL, 't-shirt', 'white', LAST_INSERT_ID());

INSERT INTO
  persons
VALUES
  (NULL, 'anton');

INSERT INTO
  shirts
VALUES
  (NULL, 'polo', 'blue', LAST_INSERT_ID()),
  (NULL, 'dress', 'white', LAST_INSERT_ID()),
  (NULL, 't-shirt', 'blue', LAST_INSERT_ID());
  
SELECT 
  *
FROM
  persons;

SELECT
  *
FROM
  shirts;
  
/*结果如下
+----+----------+
| id | name     |
+----+----------+
|  1 | lilliana |
|  2 | anton    |
+----+----------+
2 rows in set

+----+---------+--------+-------+
| id | style   | color  | owner |
+----+---------+--------+-------+
|  1 | dress   | orange |     1 |
|  2 | polo    | red    |     1 |
|  3 | dress   | blue   |     1 |
|  4 | t-shirt | white  |     1 |
|  5 | polo    | blue   |     2 |
|  6 | dress   | white  |     2 |
|  7 | t-shirt | blue   |     2 |
+----+---------+--------+-------+
7 rows in set
shirts表的最后一列的填充来源于persons表的ID字段
*/

SELECT
  s.*
FROM
  persons p, shirts s
WHERE
  p.name LIKE 'li%'
AND
  s.owner=p.id
AND
  s.color != 'white';
/*结果如下
+----+-------+--------+-------+
| id | style | color  | owner |
+----+-------+--------+-------+
|  1 | dress | orange |     1 |
|  2 | polo  | red    |     1 |
|  3 | dress | blue   |     1 |
+----+-------+--------+-------+
3 rows in set
*/




#第三个例子

#创建数据库
CREATE DATABASE
  test;
USE test

CREATE TABLE
  pet(
  name VARCHAR(20),
  owner VARCHAR(20),
  species VARCHAR(20),
  sex CHAR(1),
  birth DATE,
  death DATE);
/*
[Err] 1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'information_schema.PROFILING.SEQ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
*/

SHOW TABLES;
/*
+----------------+
| Tables_in_test |
+----------------+
| pet            |
+----------------+
1 row in set
*/

#查看表信息
DESCRIBE pet;
/*
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  |     | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
6 rows in set
*/

#从文本文件导入数据
LOAD DATA LOCAL INFILE
  "pet.txt"
INTO 
  TABLE pet;





#关于日期的一些计算

#从日期计算天数
SELECT
  TO_DAYS(NOW())-TO_DAYS('1994-10-10');
/*
+--------------------------------------+
| TO_DAYS(NOW())-TO_DAYS('1994-10-10') |
+--------------------------------------+
|                                 8697 |
+--------------------------------------+
1 row in set
*/

#显示日期中的年或月或日
SELECT
  YEAR('1994-10-10'),MONTH('1994-10-10'),DAY('1994-10-10');
/*
+--------------------+---------------------+-------------------+
| YEAR('1994-10-10') | MONTH('1994-10-10') | DAY('1994-10-10') |
+--------------------+---------------------+-------------------+
|               1994 |                  10 |                10 |
+--------------------+---------------------+-------------------+
1 row in set
*/
#可以把这三个方程放在where之后

#遇到12月份，下一个月应为1月份
SELECT
  MONTH(DATE_ADD('2018-12-11', INTERVAL 1 MONTH));
/*
+-------------------------------------------------+
| MONTH(DATE_ADD('2018-12-11', INTERVAL 1 MONTH)) |
+-------------------------------------------------+
|                                               1 |
+-------------------------------------------------+
1 row in set
*/
#第二种方法
SELECT
  MOD(MONTH('2018-12-11'),12)+1;
#`MOD`(N,12)返回在0-11之间的一个数字，如果当前是12月，则绕回月份到值0，因此最后要加1




#NULL值的操作
#不能被比较
SELECT
  1=NULL, 1!=NULL, 1<NULL, 1>NULL;
/*
+--------+---------+--------+--------+
| 1=NULL | 1!=NULL | 1<NULL | 1>NULL |
+--------+---------+--------+--------+
| NULL   | NULL    | NULL   | NULL   |
+--------+---------+--------+--------+
1 row in set
*/

SELECT
  1 IS NULL, 1 IS NOT NULL;
/*
+-----------+---------------+
| 1 IS NULL | 1 IS NOT NULL |
+-----------+---------------+
|         0 |             1 |
+-----------+---------------+
1 row in set
*/
